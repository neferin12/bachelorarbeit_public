(set-logic QF_SNIRA)
(set-option :produce-assignments true)
(set-option :produce-models true)
(define-fun % ((a Real) (b Real)) Real (- a (* (to_int (/ a b)) b)))
(define-fun <=s ((a String) (b String)) Bool (str.<= a b))
(define-fun <s ((a String) (b String)) Bool (and (str.<= a b) (not (= a b))))
(define-fun >s ((a String) (b String)) Bool (not (and (str.<= a b) (not (= a b)))))
(define-fun >=s ((a String) (b String)) Bool (or (>s a b) (= a b)))
(declare-const auszahlung.empfaenger.istMitglied Bool)
(assert auszahlung.empfaenger.istMitglied)
(declare-const projekt.genehmigt Bool)
(declare-const auszahlung.beantragungsdatum Real)
(declare-const projekt.genehmigtAm Real)
(assert (and projekt.genehmigt (<= (/ (- auszahlung.beantragungsdatum projekt.genehmigtAm) 86400000) 365.0)))
(declare-const auszahlung.betrag Real)
(assert (not (= 3.14 0)))
(assert (= (% auszahlung.betrag 3.14) 0.0))
(declare-const projekt.intialeAusschuettung Real)
(assert (and (<= auszahlung.betrag projekt.intialeAusschuettung) (> auszahlung.betrag 0.0)))
(declare-const auszahlung.vorangegangene Real)
(assert (not (= (- auszahlung.vorangegangene 5.0) 0)))
(assert (and (<= auszahlung.vorangegangene 4.0) (<= auszahlung.betrag (* projekt.intialeAusschuettung (+ (/ 1.0 (- auszahlung.vorangegangene 5.0)) 1.2)))))
(assert (not (= 1.0 0)))
(assert (and (> auszahlung.betrag 0.0) (and (>= auszahlung.vorangegangene 0.0) (= (% auszahlung.vorangegangene 1.0) 0.0))))